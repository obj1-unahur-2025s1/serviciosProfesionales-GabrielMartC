import serviciosProfesionales.*

describe "group of tests for Etapa 1" {
  const unsam = new Universidad(provinciaOrigen=buenosAires, honorarioPorHoraEstimado=3500)
  const unr = new Universidad(provinciaOrigen=santaFe, honorarioPorHoraEstimado=2800)
  const uniCorr = new Universidad(provinciaOrigen=corrientes, honorarioPorHoraEstimado=4200)
  const unahur = new Universidad(provinciaOrigen=buenosAires, honorarioPorHoraEstimado=8800)

  // var juana = new Profesional(universidad=unr,tipo=vinculado)
  // var melina = new Profesional(universidad=uniCorr,tipo=asociado)
  // var rocio = new Profesional(universidad=unahur,tipo=(new Libre(puedeTrabajarEn=#{santaFe, buenosAires, cordoba},honorarios=5000)))
  // var luciana = new Profesional(universidad=unr,tipo=(new Libre(puedeTrabajarEn=#{santaFe, entreRios},honorarios=3200)))

  var juana = new ProfesionalVinculado(universidad=unr)
  var melina = new ProfesionalAsociado(universidad=uniCorr)
  var rocio = new ProfesionalLibre(universidad=unahur)
  var luciana = new ProfesionalLibre(universidad=unr)


  var nuevaEmpresa = new EmpresaServicio(honorarioReferencia=3500)

  method initialize(){
    rocio.provinciasDondePuedeTr(#{santaFe, buenosAires, cordoba})
    rocio.honorariosPorHora(5000)

    luciana.provinciasDondePuedeTr(#{santaFe, entreRios})
    luciana.honorariosPorHora(3200)

    buenosAires.universidades(#{unsam, unahur})
    santaFe.universidades(#{unr})
    corrientes.universidades(#{uniCorr})

    nuevaEmpresa.incorporarProf(juana)
    nuevaEmpresa.incorporarProf(melina)
    nuevaEmpresa.incorporarProf(rocio)
    nuevaEmpresa.incorporarProf(luciana)

  }


  test "dos de sus profesionales estudiaron en Rosario, uno en Hurlingham, ninguno (o sea cero) en San Mart√≠n." {
    assert.equals(2, nuevaEmpresa.cantProfQueEstudiaronEn(unr))
    assert.equals(1, nuevaEmpresa.cantProfQueEstudiaronEn(unahur))
    assert.equals(0, nuevaEmpresa.cantProfQueEstudiaronEn(unsam))

  }

  test "el profesional caro registrado es Rocio" {
    assert.that(nuevaEmpresa.profesionalesCaros().contains(rocio))
  }

  test "unr, unahur y uniCorr son universidades formadoras dentro de la empresa" {
    assert.that(nuevaEmpresa.universidadesFormadoras().contains(unr))
    assert.that(nuevaEmpresa.universidadesFormadoras().contains(unahur))
    assert.that(nuevaEmpresa.universidadesFormadoras().contains(uniCorr))

  }

  test "profesional mas barato es Juana" {
    assert.equals(juana, nuevaEmpresa.profesionalMasBarato())
  }

  test "el honorario barato mas barato registrado es " {
    assert.equals(2800,nuevaEmpresa.honorarioMasBaratoRegistrado())
  }

  test "la empresa es acotada" {
    assert.that(nuevaEmpresa.esDeGenteAcotada())
  }

  test "luciana tambien trabaja en corrientes y misiones,la empresa No es acotada" {
    luciana.agregarNuevaProvincia(corrientes)
    luciana.agregarNuevaProvincia(cordoba)
    assert.notThat(nuevaEmpresa.esDeGenteAcotada())
  }
}