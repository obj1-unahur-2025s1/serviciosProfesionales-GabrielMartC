// import serviciosProfesionales.*
import profesional.*
import universidad.*
import provincias.*
import empresa.*
import solicitante.*


describe "group of tests for Etapa 1" {
  const unsam = new Universidad(provinciaOrigen=buenosAires, honorarioPorHoraEstimado=3500)
  const unr = new Universidad(provinciaOrigen=santaFe, honorarioPorHoraEstimado=2800)
  const uniCorr = new Universidad(provinciaOrigen=corrientes, honorarioPorHoraEstimado=4200)
  const unahur = new Universidad(provinciaOrigen=buenosAires, honorarioPorHoraEstimado=8800)

  var juana = new ProfesionalVinculado(universidad=unr)
  var melina = new ProfesionalAsociado(universidad=uniCorr)
  var rocio = new ProfesionalLibre(universidad=unahur)
  var luciana = new ProfesionalLibre(universidad=unr)


  var nuevaEmpresa = new EmpresaServicio(honorarioReferencia=3500)

  method initialize(){
    rocio.provinciasDondePuedeTr(#{santaFe, buenosAires, cordoba})
    rocio.honorariosPorHora(5000)

    luciana.provinciasDondePuedeTr(#{santaFe, entreRios})
    luciana.honorariosPorHora(3200)

    buenosAires.universidades(#{unsam, unahur})
    santaFe.universidades(#{unr})
    corrientes.universidades(#{uniCorr})

    nuevaEmpresa.incorporarProf(juana)
    nuevaEmpresa.incorporarProf(melina)
    nuevaEmpresa.incorporarProf(rocio)
    nuevaEmpresa.incorporarProf(luciana)
  }


  test "dos de sus profesionales estudiaron en Rosario, uno en Hurlingham, ninguno (o sea cero) en San Mart√≠n." {
    assert.equals(2, nuevaEmpresa.cantProfQueEstudiaronEn(unr))
    assert.equals(1, nuevaEmpresa.cantProfQueEstudiaronEn(unahur))
    assert.equals(0, nuevaEmpresa.cantProfQueEstudiaronEn(unsam))

  }

  test "el profesional caro registrado es Rocio" {
    assert.that(nuevaEmpresa.profesionalesCaros().contains(rocio))
  }

  test "unr, unahur y uniCorr son universidades formadoras dentro de la empresa" {
    assert.that(nuevaEmpresa.universidadesFormadoras().contains(unr))
    assert.that(nuevaEmpresa.universidadesFormadoras().contains(unahur))
    assert.that(nuevaEmpresa.universidadesFormadoras().contains(uniCorr))

  }

  test "profesional mas barato es Juana" {
    assert.equals(juana, nuevaEmpresa.profesionalMasBarato())
  }

  test "el honorario barato mas barato registrado es " {
    assert.equals(2800,nuevaEmpresa.honorarioMasBaratoRegistrado())
  }

  test "la empresa es acotada" {
    assert.that(nuevaEmpresa.esDeGenteAcotada())
  }

  test "luciana tambien trabaja en corrientes y misiones,la empresa No es acotada" {
    luciana.agregarNuevaProvincia(corrientes)
    luciana.agregarNuevaProvincia(cordoba)
    assert.notThat(nuevaEmpresa.esDeGenteAcotada())
  }
}

describe "group od test of etapa 2" {
  const unsam = new Universidad(provinciaOrigen=buenosAires, honorarioPorHoraEstimado=3500)
  const unr = new Universidad(provinciaOrigen=santaFe, honorarioPorHoraEstimado=2800)
  const uniCorr = new Universidad(provinciaOrigen=corrientes, honorarioPorHoraEstimado=4200)
  const unahur = new Universidad(provinciaOrigen=buenosAires, honorarioPorHoraEstimado=8800)
  const ungs = new Universidad(provinciaOrigen=buenosAires, honorarioPorHoraEstimado=2000)

  var juana = new ProfesionalVinculado(universidad=unr)
  var melina = new ProfesionalAsociado(universidad=uniCorr)
  var rocio = new ProfesionalLibre(universidad=unahur)
  var luciana = new ProfesionalLibre(universidad=unr)


  var nuevaEmpresa = new EmpresaServicio(honorarioReferencia=3500)

  var solicJose = new SolicitantePersona(provincia=buenosAires)
  var solicClubSocial = new SolicitanteClub(provincias=#{misiones})
  var solicInstitucion = new SolicitanteInstitucion(universidades=#{ungs, unahur})

  method initialize(){
    rocio.provinciasDondePuedeTr(#{santaFe, buenosAires, cordoba})
    rocio.honorariosPorHora(5000)

    luciana.provinciasDondePuedeTr(#{santaFe, entreRios})
    luciana.honorariosPorHora(3200)

    buenosAires.universidades(#{unsam, unahur})
    santaFe.universidades(#{unr})
    corrientes.universidades(#{uniCorr})

    nuevaEmpresa.incorporarProf(juana)
    nuevaEmpresa.incorporarProf(melina)
    nuevaEmpresa.incorporarProf(rocio)
    nuevaEmpresa.incorporarProf(luciana)
  }

  test "nuevaEmpresa puede atender a solicJose" {
    assert.that(nuevaEmpresa.puedeSatisfacerASolicitante(solicJose))
  }

  test "nuevaEmpresa no puede atender a solicClubSocial" {
    assert.notThat(nuevaEmpresa.puedeSatisfacerASolicitante(solicClubSocial))
    
  }

  test "nuevaEmpresa puede atender a solicInstitucion" {
    assert.that(nuevaEmpresa.puedeSatisfacerASolicitante(solicInstitucion))
    
  }
}


describe "group of test of etapa 3" {
  const unsam = new Universidad(provinciaOrigen=buenosAires, honorarioPorHoraEstimado=3500)
  const unr = new Universidad(provinciaOrigen=santaFe, honorarioPorHoraEstimado=2800)
  const uniCorr = new Universidad(provinciaOrigen=corrientes, honorarioPorHoraEstimado=4200)
  const unahur = new Universidad(provinciaOrigen=buenosAires, honorarioPorHoraEstimado=8800)

  var juana = new ProfesionalVinculado(universidad=unr)
  var melina = new ProfesionalAsociado(universidad=uniCorr)
  var rocio = new ProfesionalLibre(universidad=unahur)
  var luciana = new ProfesionalLibre(universidad=unr)


  test "juana cobra 5000, dona la mitad a su univ, gasta la otra mitad, no posee fondos" {
    juana.cobrarImporte(5000)

    assert.equals(2500, juana.universidad().fondos())
    assert.equals(0, juana.fondos())
  }

  test "melina cobra 2000, dona todo a la asiciacion, no posee fondos" {
    melina.cobrarImporte(2000)

    assert.equals(2000, asociacionProfLitoral.fondos())
    assert.equals(0, melina.fondos())
  }

  test "rocio cobra 4000" {
    rocio.cobrarImporte(4000)

    assert.equals(4000, rocio.fondos())
  }

  test "rocio le pasa a luciana 1000, rocio tiene 3000, luciana 1000" {
    rocio.cobrarImporte(4000)
    rocio.pasarDinero(luciana, 1000)

    assert.equals(3000, rocio.fondos())
    assert.equals(1000, luciana.fondos())
  }

  test "rocio le pasa a melina 3400, rocio ahora posee 600" {
    rocio.cobrarImporte(4000)
    rocio.pasarDinero(melina, 3400)

    assert.equals(600, rocio.fondos())
  }

  test "melina es asociada. Fondo actual de asociacion es 5400, melina posee 0 fondos" {
    melina.cobrarImporte(2000)

    rocio.cobrarImporte(4000)
    rocio.pasarDinero(melina, 3400)

    assert.equals(5400,asociacionProfLitoral.fondos())
    assert.equals(0, melina.fondos())

  }

  test "rocio intenta pasarle 700 a juana, pero no ocurre nada" {
    rocio.cobrarImporte(4000)
    rocio.pasarDinero(melina, 3400)

    rocio.pasarDinero(juana, 700)

    assert.equals(600, rocio.fondos())
    assert.equals(0, juana.fondos())
  }
}